# clang(1) completion                                        -*- shell-script -*-
_clang()
{
    local cur prev words cword arg flags prev2
    _init_completion || return

    if [[ $cword > 1 ]]; then
        prev2="${COMP_WORDS[$cword - 2]}"
    fi

    # Clang want to know if -cc1 or -Xclang option is specified or not, because we don't want to show
    # cc1 options otherwise.
    if [[ "${COMP_WORDS[1]}" == "-cc1" || "$prev" == "-Xclang" ]]; then
        arg="#"
    fi

    # bash always separates '=' as a token even if there's no space before/after '='.
    # On the other hand, '=' is just a regular character for clang options that
    # contain '='. For example, "-stdlib=" is defined as is, instead of "-stdlib" and "=".
    # So, we need to partially undo bash tokenization here for integrity.
    if [[ "$cur" == -* ]]; then
        # -foo<tab>
        arg="$arg$cur"
    elif [[ "$prev" == -*  && "$cur" == '=' ]]; then
        # -foo=<tab>
        arg="$arg$prev=,"
    elif [[ "$cur" == -*= ]]; then
        # -foo=<tab>
        arg="$arg$cur,"
    elif [[ "$prev" == -* ]]; then
        # -foo <tab> or -foo bar<tab>
        arg="$arg$prev,$cur"
    elif [[ "$prev2" == -* && "$prev" == '=' ]]; then
        # -foo=bar<tab>
        arg="$arg$prev2=,$cur"
    elif [[ ${cur: -1} != '=' && ${cur/=} != $cur ]]; then
        # -foo=bar<tab>
        arg="$arg${cur%=*}=,${cur#*=}"
    fi

    # expand ~ to $HOME
    eval local path=${COMP_WORDS[0]}
    flags=$( "$path" --autocomplete="$arg" 2>/dev/null | sed -e 's/\t.*//' )
    # If clang is old that it does not support --autocomplete,
    # fall back to the filename completion.
    if [[ $? -ne 0 ]]; then
        _filedir
        return
    fi

    # When clang does not emit any possible autocompletion, or user pushed tab after " ",
    # just autocomplete files.
    if [[ "$flags" == $'\n' || "$arg" == "" ]]; then
        # If -foo=<tab> and there was no possible values, autocomplete files.
        [[ "$cur" == '=' || "$cur" == -*= ]] && cur=""
        _filedir
    elif [[ "$cur" == '=' ]]; then
        COMPREPLY=( $( compgen -W "$flags" -- "") )
    else
        # Bash automatically appends a space after '=' by default.
        # Disable it so that it works nicely for options in the form of -foo=bar.
        [[ "${flags: -1}" == '=' ]] && compopt -o nospace 2> /dev/null
        COMPREPLY=( $( compgen -W "$flags" -- "$cur" ) )
    fi
} &&
complete -F _clang clang
# ex: filetype=sh
