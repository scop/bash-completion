# fio(1) completion                                        -*- shell-script -*-

_comp_cmd_fio__engines()
{
    local IFS=$'\n'
    ret=($("$1" --enghelp 2>/dev/null | command sed -ne '/^[[:space:]]/p'))
    return $((!${#ret[*]}))
}

_fio()
{
    local cur prev words cword split
    _init_completion -s || return

    local ret
    case $prev in
        --help | --version)
            return
            ;;
        --debug)
            _comp_delimited , -W "process file io mem blktrace verify
                random parse diskutil job mutex profile time net rate compress
                steadystate helperthread"
            return
            ;;
        --output-format)
            COMPREPLY=($(compgen -W "terse json json+ normal" -- "$cur"))
            return
            ;;
        --terse-version)
            COMPREPLY=($(compgen -W "2 3" -- "$cur"))
            return
            ;;
        --cmdhelp)
            ret=($("$1" --cmdhelp=all 2>/dev/null | awk '{print $1}') all)
            COMPREPLY=($(compgen -W '"${ret[@]}"' -- "$cur"))
            return
            ;;
        --enghelp)
            _comp_cmd_fio__engines "$1" &&
                COMPREPLY=($(compgen -W '"${ret[@]}"' -- "$cur"))
            return
            ;;
        --eta)
            COMPREPLY=($(compgen -W "always never auto" -- "$cur"))
            return
            ;;
        --daemonize)
            _filedir pid
            return
            ;;
        --client)
            _known_hosts_real -- "$cur"
            return
            ;;
        --remote-config)
            _filedir job
            return
            ;;
        --idle-prof)
            COMPREPLY=($(compgen -W "system percpu calibrate" -- "$cur"))
            return
            ;;
        --inflate-log)
            _filedir log
            return
            ;;
        --trigger-file)
            _filedir
            return
            ;;
        --trigger | --trigger-remote)
            compopt -o filenames
            COMPREPLY=($(compgen -c -- "$cur"))
            return
            ;;
        --aux-path)
            _filedir -d
            return
            ;;
        --ioengine)
            _comp_cmd_fio__engines "$1" &&
                COMPREPLY=($(compgen -W '"${ret[@]}"' -- "$cur"))
            return
            ;;
        --exec_postrun | --exec_prerun)
            COMPREPLY=($(compgen -c -- "$cur"))
            return
            ;;
        --uid)
            _uids
            return
            ;;
        --gid)
            _gids
            return
            ;;
        --?*)
            local IFS=$'\n'
            local cmdhelp=($("$1" --cmdhelp=${prev#--} 2>/dev/null))
            _comp_unlocal IFS
            case ${cmdhelp[*]-} in
                *"showing closest match"*)
                    # ignore
                    ;;
                *" type: boolean "* | *" type: empty or boolean "*)
                    COMPREPLY=($(compgen -W '0 1' -- "$cur"))
                    return
                    ;;
                *" valid values:"*)
                    # For example, for --kb_base=:
                    #        valid values: 1024       [...]
                    #                    : 1000       [...]
                    local line="" in_values=false
                    ret=()
                    for line in "${cmdhelp[@]}"; do
                        if $in_values; then
                            if [[ $line =~ ^[[:space:]]*:[[:space:]]*([^[:space:]]+) ]]; then
                                ret+=("${BASH_REMATCH[1]}")
                            else
                                break
                            fi
                        elif [[ $line =~ ^[[:space:]]*valid\ values:[[:space:]]*([^[:space:]]+) ]]; then
                            in_values=true
                            ret+=("${BASH_REMATCH[1]}")
                        fi
                    done
                    COMPREPLY=($(compgen -W '"${ret[@]}"' -- "$cur"))
                    return
                    ;;
            esac
            # else fallthrough
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=($(
            compgen -W '
                      $(_parse_help "$1")
                      $("$1" --cmdhelp=all 2>/dev/null | \
                             awk "{printf \"--%s=\n\", \$1}")
            ' -- "$cur"
        ))
        [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
        return
    fi

    _filedir job
} &&
    complete -F _fio fio

# ex: filetype=sh
