# mutt completion                                          -*- shell-script -*-
#
# Mutt doesn't have an "addressbook" like Pine, but it has aliases and
# a "query" function to retrieve addresses, so that's what we use here.

# @param $1 (cur) Current word to complete
_comp_cmd_mutt__addresses()
{
    _comp_cmd_mutt__aliases "$1"
    _comp_cmd_mutt__query "$1"

    COMPREPLY+=($(compgen -u -- "$1"))
}

# Find muttrc to use
# @output  muttrc filename
_muttrc()
{
    local muttrc=
    # Search COMP_WORDS for '-F muttrc' or '-Fmuttrc' argument
    set -- "${words[@]}"
    while (($# > 0)); do
        if [[ $1 == -F* ]]; then
            local ret
            if ((${#1} > 2)); then
                _comp_dequote "${1:2}" && muttrc=$ret
            else
                shift
                [[ ${1-} ]] && _comp_dequote "$1" && muttrc=$ret
            fi
            break
        fi
        shift
    done

    if [[ ! $muttrc ]]; then
        if [[ -f ~/.${muttcmd}rc ]]; then
            muttrc=\~/.${muttcmd}rc
        elif [[ -f ~/.${muttcmd}/${muttcmd}rc ]]; then
            muttrc=\~/.${muttcmd}/${muttcmd}rc
        fi
    fi
    printf "%s" "${muttrc-}"
}

# Recursively build list of sourced config files
# @param $1...   Config file to process
# @var[out] ret  List of config files
# @return 0 if any conffiles are generated, 1 if none is generated.
_comp_cmd_mutt__get_conffiles()
{
    local -a conffiles=()
    local -A visited=()
    local file
    for file; do
        _comp_dequote "$file"
        _comp_cmd_mutt__get_conffiles__visit "$ret"
    done
    ((${#conffiles[@]})) || return 1
    ret=("${conffiles[@]}")
}
# Recursion function for _comp_cmd_mutt__get_conffiles
# @var[ref] conffiles  List of config files found so far
# @var[ref] visited    Dictionary of config files already visited
_comp_cmd_mutt__get_conffiles__visit()
{
    [[ -f $1 && ${visited[$1]-} != set ]] || return 0
    visited[$1]=set
    conffiles+=("$1")

    local -a newconffiles=($(command sed -n 's|^source[[:space:]]\{1,\}\([^[:space:]]\{1,\}\).*$|\1|p' "$1"))
    ((${#newconffiles[@]})) || return 0

    local file
    for file in "${newconffiles[@]}"; do
        __expand_tilde_by_ref file
        _comp_cmd_mutt__get_conffiles__visit "$file"
    done
}

# Recursively build list of sourced config files
# @param $1...  Config file to process
# @output       List of config files
_muttconffiles()
{
    local ret
    _comp_cmd_mutt__get_conffiles "$@" &&
        printf '%s\n' "${ret[@]}"
}

# @param $1 (cur) Current word to complete
_comp_cmd_mutt__aliases()
{
    local cur=$1 muttrc muttcmd=${words[0]}
    local -a conffiles aliases

    muttrc=$(_muttrc)
    [[ ! $muttrc ]] && return

    local ret
    _comp_cmd_mutt__get_conffiles "$muttrc" || return 0
    conffiles=("${ret[@]}")
    # shellcheck disable=SC2046
    aliases=($(command sed -n 's|^alias[[:space:]]\{1,\}\([^[:space:]]\{1,\}\).*$|\1|p' \
        "${conffiles[@]}"))
    ((${#aliases[@]})) &&
        COMPREPLY+=($(compgen -W '"${aliases[@]}"' -- "$cur"))
}

# @param $1 (cur) Current word to complete
_comp_cmd_mutt__query()
{
    local cur=$1 querycmd muttcmd=${words[0]}
    local -a queryresults

    querycmd="$("$muttcmd" -Q query_command 2>/dev/null | command sed -e 's|^query_command=\"\(.*\)\"$|\1|' -e 's|%s|'"$cur"'|')"
    if [[ ! $cur || ! $querycmd ]]; then
        queryresults=()
    else
        __expand_tilde_by_ref querycmd
        # $querycmd is expected to be a command with arguments
        queryresults=($($querycmd |
            command sed -n '2,$s|^\([^[:space:]]\{1,\}\).*|\1|p'))
    fi

    COMPREPLY+=($(compgen -W "${queryresults[*]}" -- "$cur"))
}

# @param $1 (cur) Current word to complete
_comp_cmd_mutt__filedir()
{
    local cur=$1 folder muttrc spoolfile muttcmd=${words[0]}

    muttrc=$(_muttrc)
    if [[ $cur == [=+]* ]]; then
        folder="$("$muttcmd" -F "$muttrc" -Q folder 2>/dev/null | command sed -e 's|^folder=\"\(.*\)\"$|\1|')"
        [[ $folder ]] || folder=~/Mail

        # Match any file in $folder beginning with $cur
        # (minus the leading '=' sign).
        compopt -o filenames
        COMPREPLY=($(compgen -f -- "$folder/${cur:1}"))
        COMPREPLY=(${COMPREPLY[@]#$folder/})
        return
    elif [[ $cur == !* ]]; then
        spoolfile="$("$muttcmd" -F "$muttrc" -Q spoolfile 2>/dev/null |
            command sed -e 's|^spoolfile=\"\(.*\)\"$|\1|')"
        [[ $spoolfile ]] && eval cur="${cur/^!/$spoolfile}"
    fi
    _filedir
}

_comp_cmd_mutt()
{
    local cur prev words cword comp_args
    _comp_initialize -n =+! -- "$@" || return

    case $cur in
        -*)
            COMPREPLY=($(compgen -W '-A -a -b -c -e -f -F -H -i -m -n -p -Q -R -s
            -v -x -y -z -Z -h' -- "$cur"))
            return
            ;;
        *)
            case $prev in
                -*[afFHi])
                    _comp_cmd_mutt__filedir "$cur"
                    return
                    ;;
                -*A)
                    _comp_cmd_mutt__aliases "$cur"
                    return
                    ;;
                -*[emQshpRvyzZ])
                    return
                    ;;
                *)
                    _comp_cmd_mutt__addresses "$cur"
                    return
                    ;;
            esac
            ;;
    esac
} &&
    complete -F _comp_cmd_mutt -o default mutt muttng neomutt

# ex: filetype=sh
