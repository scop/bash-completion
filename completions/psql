# bash completion for Postgresql                           -*- shell-script -*-

_pg_databases()
{
    # -w was introduced in 8.4, https://launchpad.net/bugs/164772
    # "Access privileges" in output may contain linefeeds, hence the NF > 1
    COMPREPLY=($(compgen -W "$(psql -XAtqwlF $'\t' 2>/dev/null |
        awk 'NF > 1 { print $1 }')" -- "$cur"))
}

_pg_users()
{
    # -w was introduced in 8.4, https://launchpad.net/bugs/164772
    COMPREPLY=($(compgen -W "$(psql -XAtqwc 'select usename from pg_user' \
        template1 2>/dev/null)" -- "$cur"))
    ((${#COMPREPLY[@]} == 0)) && COMPREPLY=($(compgen -u -- "$cur"))
}

_pg_services()
{
    files=()

    personal=${PGSERVICEFILE:-$HOME/.pg_service.conf}
    if [[ -r "$personal" ]]; then
        files+=("$personal")
    fi

    systemdir=${PGSYSCONFDIR:-try-default}
    if [[ "$systemdir" == "try-default" ]]; then
    configured_systemdir=$(pg_config --systemconfdir 2>/dev/null)
        if [[ $? -eq 0 ]]; then
            systemdir="$configured_systemdir"
        fi
    fi

    if [[ -d "$systemdir" ]] && [[ -r "$systemdir/pg_service.conf" ]]; then
        files+=("$systemdir/pg_service.conf")
    fi

    all_services=""
    for f in "${files[@]}"; do
        all_services="$all_services $(cat $f | grep -e '\[.*\]' | sed -E 's/\[(.*)]/\1/')"
    done

    COMPREPLY=( $(compgen -W "$all_services" -- "${cur#service=}") )
}

# createdb(1) completion
#
_createdb()
{
    local cur prev words cword split comp_args
    _comp_initialize -s -- "$@" || return

    local noargopts='!(-*|*[hUOpDET]*)'
    # shellcheck disable=SC2254
    case $prev in
        --host | -${noargopts}h)
            _known_hosts_real -- "$cur"
            return
            ;;
        --username | --owner | -${noargopts}[UO])
            _pg_users
            return
            ;;
        --help | --version | --port | --tablespace | --encoding | --template | \
            -${noargopts}[pDET])
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=($(compgen -W '$(_parse_help "$1")' -- "$cur"))
        [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    else
        _pg_databases
    fi
} &&
    complete -F _createdb createdb

# createuser(1) completion
#
_createuser()
{
    local cur prev words cword split comp_args
    _comp_initialize -s -- "$@" || return

    local noargopts='!(-*|*[pchU]*)'
    # shellcheck disable=SC2254
    case $prev in
        --help | --version | --port | --connection-limit | -${noargopts}[pc])
            return
            ;;
        --host | -${noargopts}h)
            _known_hosts_real -- "$cur"
            return
            ;;
        --username | -${noargopts}U)
            _pg_users
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=($(compgen -W '$(_parse_help "$1")' -- "$cur"))
        [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    fi
} &&
    complete -F _createuser createuser

# dropdb(1) completion
#
_dropdb()
{
    local cur prev words cword split comp_args
    _comp_initialize -s -- "$@" || return

    local noargopts='!(-*|*[hU]*)'
    # shellcheck disable=SC2254
    case $prev in
        --host | -${noargopts}h)
            _known_hosts_real -- "$cur"
            return
            ;;
        --username | -${noargopts}U)
            _pg_users
            return
            ;;
        --help | --version)
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=($(compgen -W '$(_parse_help "$1")' -- "$cur"))
        [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    else
        _pg_databases
    fi
} &&
    complete -F _dropdb dropdb

# dropuser(1) completion
#
_dropuser()
{
    local cur prev words cword split comp_args
    _comp_initialize -s -- "$@" || return

    local noargopts='!(-*|*[phU]*)'
    # shellcheck disable=SC2254
    case $prev in
        --help | --version | --port | -${noargopts}p)
            return
            ;;
        --host | -${noargopts}h)
            _known_hosts_real -- "$cur"
            return
            ;;
        --username | -${noargopts}U)
            _pg_users
            return
            ;;
    esac

    $split && return

    if [[ $cur == -* ]]; then
        COMPREPLY=($(compgen -W '$(_parse_help "$1")' -- "$cur"))
        [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    else
        _pg_users
    fi
} &&
    complete -F _dropuser dropuser

# psql(1) completion
#
_psql()
{
    local cur prev words cword split comp_args
    _comp_initialize -s -- "$@" || return

    local noargopts='!(-*|*[hUdofLcFpPRTv]*)'
    # shellcheck disable=SC2254
    case $prev in
        --host | -${noargopts}h)
            _known_hosts_real -- "$cur"
            return
            ;;
        --username | -${noargopts}U)
            _pg_users
            return
            ;;
        --dbname | -${noargopts}d)
            _pg_databases
            return
            ;;
        --output | --file | --log-file | -${noargopts}[ofL])
            _filedir
            return
            ;;
        --help | --version | --command | --field-separator | --port | --pset | \
            --record-separator | --table-attr | --set | --variable | \
            -${noargopts}[?VcFpPRTv])
            return
            ;;
    esac

    if [[ "$cur" =~ service=.* ]]; then
        _pg_services
        return
    fi

    $split && return

    if [[ $cur == -* ]]; then
        # return list of available options
        COMPREPLY=($(compgen -W '$(_parse_help "$1")' -- "$cur"))
        [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
    else
        # return list of available databases
        _pg_databases
    fi
} &&
    complete -F _psql psql

# ex: filetype=sh
