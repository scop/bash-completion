# ssh(1) completion                                        -*- shell-script -*-

_comp_cmd_ssh__queries()
{
    local queries=$(_comp_xfunc_ssh_query "$1" help)
    [[ $queries ]] || queries="cipher cipher-auth mac kex key key-cert
         key-plain key-sig protocol-version compression sig ciphers macs
         kexalgorithms pubkeyacceptedkeytypes hostkeyalgorithms
         hostbasedkeytypes hostbasedacceptedkeytypes"
    _comp_compgen -ac "${cur,,}" -- -W "$queries help"
}

# @since 2.12
# TODO:API:rework to use vars rather than outputting
_comp_xfunc_ssh_query()
{
    ${1:-ssh} -Q "$2" 2>/dev/null
}

_comp_deprecate_func 2.12 _ssh_query _comp_xfunc_ssh_query

_comp_cmd_ssh__ciphers()
{
    local ciphers=$(_comp_xfunc_ssh_query "$1" cipher)
    [[ $ciphers ]] || ciphers="3des-cbc aes128-cbc aes192-cbc aes256-cbc
        aes128-ctr aes192-ctr aes256-ctr arcfour128 arcfour256 arcfour
        blowfish-cbc cast128-cbc"
    _comp_compgen -a -- -W "$ciphers"
}

_comp_cmd_ssh__macs()
{
    local macs=$(_comp_xfunc_ssh_query "$1" mac)
    [[ $macs ]] || macs="hmac-md5 hmac-sha1 umac-64@openssh.com hmac-ripemd160
        hmac-sha1-96 hmac-md5-96"
    _comp_compgen -a -- -W "$macs"
}

# @since 2.12
_comp_xfunc_ssh_options()
{
    # curl --silent https://raw.githubusercontent.com/openssh/openssh-portable/master/ssh_config.5 | awk '$1==".It" && $2=="Cm" && $3!="Host" && $3!="Match" {print "        "$3}' | sort
    local opts=(
        AddKeysToAgent AddressFamily BatchMode BindAddress BindInterface
        CanonicalDomains CanonicalizeFallbackLocal CanonicalizeHostname
        CanonicalizeMaxDots CanonicalizePermittedCNAMEs CASignatureAlgorithms
        CertificateFile ChallengeResponseAuthentication CheckHostIP Ciphers
        ClearAllForwardings Compression ConnectionAttempts ConnectTimeout
        ControlMaster ControlPath ControlPersist DynamicForward
        EnableSSHKeysign EscapeChar ExitOnForwardFailure FingerprintHash
        ForwardAgent ForwardX11 ForwardX11Timeout ForwardX11Trusted
        GatewayPorts GlobalKnownHostsFile GSSAPIAuthentication
        GSSAPIDelegateCredentials HashKnownHosts HostbasedAuthentication
        HostbasedKeyTypes HostKeyAlgorithms HostKeyAlias Hostname
        IdentitiesOnly IdentityAgent IdentityFile IgnoreUnknown Include IPQoS
        KbdInteractiveAuthentication KbdInteractiveDevices KexAlgorithms
        LocalCommand LocalForward LogLevel MACs
        NoHostAuthenticationForLocalhost NumberOfPasswordPrompts
        PasswordAuthentication PermitLocalCommand PKCS11Provider Port
        PreferredAuthentications ProxyCommand ProxyJump ProxyUseFdpass
        PubkeyAcceptedAlgorithms PubkeyAuthentication RekeyLimit RemoteCommand
        RemoteForward RequestTTY RevokedHostKeys SecurityKeyProvider SendEnv
        ServerAliveCountMax ServerAliveInterval SetEnv StreamLocalBindMask
        StreamLocalBindUnlink StrictHostKeyChecking SyslogFacility TCPKeepAlive
        Tunnel TunnelDevice UpdateHostKeys User UserKnownHostsFile
        VerifyHostKeyDNS VisualHostKey XAuthLocation
    )
    # Selected old ones
    opts+=(
        GSSAPIKeyExchange GSSAPIRenewalForcesRekey GSSAPIServerIdentity
        GSSAPITrustDns PubkeyAcceptedKeyTypes SmartcardDevice UsePrivilegedPort
    )
    local protocols=$(_comp_xfunc_ssh_query "${1:-ssh}" protocol-version)
    if [[ ! $protocols || $protocols == *1* ]]; then
        opts+=(Cipher CompressionLevel Protocol RhostsRSAAuthentication
            RSAAuthentication)
    fi

    compopt -o nospace
    local IFS=$' \t\n' reset=$(shopt -p nocasematch)
    shopt -s nocasematch
    local option
    COMPREPLY=($(for option in "${opts[@]}"; do
        [[ $option == "$cur"* ]] && printf '%s=\n' "$option"
    done))
    $reset
}

_comp_deprecate_func 2.12 _ssh_options _comp_xfunc_ssh_options

# Complete a ssh suboption (like ForwardAgent=y<tab>)
# Two parameters: the string to complete including the equal sign, and
# the ssh executable to invoke (optional).
# Not all suboptions are completed.
# Doesn't handle comma-separated lists.
_comp_cmd_ssh__suboption()
{
    # Split into subopt and subval
    local prev=${1%%=*} cur=${1#*=}

    case ${prev,,} in
        batchmode | canonicaldomains | canonicalizefallbacklocal | \
            challengeresponseauthentication | checkhostip | \
            clearallforwardings | controlpersist | compression | \
            enablesshkeysign | exitonforwardfailure | forwardagent | \
            forwardx11 | forwardx11trusted | gatewayports | \
            gssapiauthentication | gssapikeyexchange | \
            gssapidelegatecredentials | gssapirenewalforcesrekey | \
            gssapitrustdns | hashknownhosts | hostbasedauthentication | \
            identitiesonly | kbdinteractiveauthentication | \
            kbdinteractivedevices | nohostauthenticationforlocalhost | \
            passwordauthentication | permitlocalcommand | proxyusefdpass | \
            pubkeyauthentication | rhostsrsaauthentication | \
            rsaauthentication | streamlocalbindunlink | \
            tcpkeepalive | useprivilegedport | visualhostkey)
            _comp_compgen -- -W 'yes no'
            ;;
        addkeystoagent)
            _comp_compgen -- -W 'yes ask confirm no'
            ;;
        addressfamily)
            _comp_compgen -- -W 'any inet inet6'
            ;;
        bindaddress)
            _ip_addresses
            ;;
        canonicalizehostname)
            _comp_compgen -- -W 'yes no always'
            ;;
        identityfile)
            _comp_xfunc_ssh_identityfile
            ;;
        *file | identityagent | include | controlpath | revokedhostkeys | \
            xauthlocation)
            _comp_compgen_filedir
            ;;
        casignaturealgorithms)
            COMPREPLY=($(compgen -W '$(_comp_xfunc_ssh_query "$2" sig)' -- "$cur"))
            ;;
        cipher)
            _comp_compgen -- -W 'blowfish des 3des'
            ;;
        ciphers)
            _comp_cmd_ssh__ciphers "$2"
            ;;
        controlmaster)
            _comp_compgen -- -W 'yes ask auto autoask no'
            ;;
        compressionlevel)
            _comp_compgen -- -W '{1..9}'
            ;;
        fingerprinthash)
            _comp_compgen -- -W 'md5 sha256'
            ;;
        ipqos)
            _comp_compgen -- -W 'af1{1..4} af2{2..3} af3{1..3} af4{1..3}
                cs{0..7} ef lowdelay throughput reliability'
            ;;
        hostbasedkeytypes | hostkeyalgorithms)
            COMPREPLY=($(compgen -W '$(_comp_xfunc_ssh_query "$2" key)' -- "$cur"))
            ;;
        kexalgorithms)
            COMPREPLY=($(compgen -W '$(_comp_xfunc_ssh_query "$2" kex)' -- "$cur"))
            ;;
        loglevel)
            _comp_compgen -- -W 'QUIET FATAL ERROR INFO VERBOSE DEBUG{,1,2,3}'
            ;;
        macs)
            _comp_cmd_ssh__macs "$2"
            ;;
        pkcs11provider)
            _comp_compgen_filedir so
            ;;
        preferredauthentications)
            COMPREPLY=($(compgen -W 'gssapi-with-mic host-based publickey
                keyboard-interactive password' -- "$cur"))
            ;;
        protocol)
            local protocols=($(_comp_xfunc_ssh_query "$2" protocol-version))
            [[ $protocols ]] || protocols=(1 2)
            if ((${#protocols[@]} > 1)); then
                _comp_compgen -- -W '"${protocols[@]}"'
            fi
            ;;
        proxyjump)
            _known_hosts_real -a ${configfile:+-F "$configfile"} -- "$cur"
            ;;
        proxycommand | remotecommand | localcommand)
            _comp_compgen -- -c
            ;;
        pubkeyacceptedalgorithms | pubkeyacceptedkeytypes)
            COMPREPLY=($(compgen -W '$(_comp_xfunc_ssh_query "$2" key)' -- "$cur"))
            ;;
        requesttty)
            _comp_compgen -- -W 'no yes force auto'
            ;;
        stricthostkeychecking)
            _comp_compgen -- -W 'accept-new ask no off'
            ;;
        syslogfacility)
            _comp_compgen -- -W 'DAEMON USER AUTH LOCAL{0..7}'
            ;;
        tunnel)
            COMPREPLY=($(compgen -W 'yes no point-to-point ethernet' \
                -- "$cur"))
            ;;
        updatehostkeys | verifyhostkeydns)
            _comp_compgen -- -W 'yes no ask'
            ;;
    esac
    return 0
}

# Try to complete -o SubOptions=
#
# Returns 0 if the completion was handled or non-zero otherwise.
# @since 2.12
_comp_xfunc_ssh_suboption_check()
{
    # Get prev and cur words without splitting on =
    local cur prev
    _comp_get_words -n := cur prev
    if [[ $cur == *=* && $prev == -*o ]]; then
        _comp_cmd_ssh__suboption "$cur" "${1-}"
        return $?
    fi
    return 1
}

_comp_deprecate_func 2.12 _ssh_suboption_check _comp_xfunc_ssh_suboption_check

# Search COMP_WORDS for '-F configfile' or '-Fconfigfile' argument
# @var[out] configfile   Found configfile, if any
_comp_cmd_ssh__configfile()
{
    set -- "${words[@]}"
    while (($# > 0)); do
        if [[ $1 == -F* ]]; then
            local ret
            if ((${#1} > 2)); then
                _comp_dequote "${1:2}" && configfile=$ret
            else
                shift
                [[ ${1-} ]] && _comp_dequote "$1" && configfile=$ret
            fi
            break
        fi
        shift
    done
}

# With $1 set, look for public key files, else private
# @since 2.12
# shellcheck disable=SC2120
_comp_xfunc_ssh_identityfile()
{
    [[ ! $cur && -d ~/.ssh ]] && cur=~/.ssh/id
    _comp_compgen -a filedir
    if ((${#COMPREPLY[@]} > 0)); then
        COMPREPLY=($(compgen -W '"${COMPREPLY[@]}"' \
            -X "${1:+!}*.pub" -- "$cur"))
    fi
}

_comp_deprecate_func 2.12 _ssh_identityfile _comp_xfunc_ssh_identityfile

_comp_cmd_ssh()
{
    local cur prev words cword comp_args
    _comp_initialize -n : -- "$@" || return

    local configfile
    _comp_cmd_ssh__configfile

    _comp_xfunc_ssh_suboption_check "$1" && return

    local ipvx

    # Keep cases sorted the same they're in ssh's usage message
    # (but do group ones with same arg completion)
    case $prev in
        -*B)
            _available_interfaces -a
            return
            ;;
        -*b)
            _ip_addresses
            return
            ;;
        -*c)
            _comp_cmd_ssh__ciphers "$1"
            return
            ;;
        -*[DeLpRW])
            return
            ;;
        -*[EFS])
            _comp_compgen_filedir
            return
            ;;
        -*I)
            _comp_compgen_filedir so
            return
            ;;
        -*i)
            _comp_xfunc_ssh_identityfile
            return
            ;;
        -*J)
            _known_hosts_real -a ${configfile:+-F "$configfile"} -- "$cur"
            return
            ;;
        -*l)
            _comp_compgen -- -u
            return
            ;;
        -*m)
            _comp_cmd_ssh__macs "$1"
            return
            ;;
        -*O)
            _comp_compgen -- -W 'check forward cancel exit stop'
            return
            ;;
        -*o)
            _comp_xfunc_ssh_options "$1"
            return
            ;;
        -*Q)
            _comp_cmd_ssh__queries "$1"
            return
            ;;
        -*w)
            _available_interfaces
            return
            ;;
        -*4*)
            ipvx=-4
            ;;
        -*6*)
            ipvx=-6
            ;;
    esac

    if [[ $cur == -F* ]]; then
        _comp_compgen -c "${cur#-F}" filedir
        # Prefix completions with '-F'
        COMPREPLY=("${COMPREPLY[@]/#/-F}")
    elif [[ $cur == -* ]]; then
        _comp_compgen_usage
    else
        local args
        # Keep glob sort in sync with cases above
        _count_args "=" "-*[BbcDeLpRWEFSIiJlmOoQw]"
        if ((args > 1)); then
            compopt -o filenames
            _comp_compgen -a -- -c
        else
            _known_hosts_real ${ipvx-} -a ${configfile:+-F "$configfile"} \
                -- "$cur"
        fi
    fi
} &&
    shopt -u hostcomplete &&
    complete -F _comp_cmd_ssh ssh slogin autossh sidedoor

# sftp(1) completion
#
_comp_cmd_sftp()
{
    local cur prev words cword comp_args
    _comp_initialize -- "$@" || return

    local configfile
    _comp_cmd_ssh__configfile

    _comp_xfunc_ssh_suboption_check && return

    local ipvx=

    case $prev in
        -*[BDlPRs])
            return
            ;;
        -*[bF])
            _comp_compgen_filedir
            return
            ;;
        -*i)
            _comp_xfunc_ssh_identityfile
            return
            ;;
        -*c)
            _comp_cmd_ssh__ciphers
            return
            ;;
        -*J)
            _known_hosts_real -a ${configfile:+-F "$configfile"} -- "$cur"
            return
            ;;
        -*o)
            _comp_xfunc_ssh_options
            return
            ;;
        -*S)
            compopt -o filenames
            _comp_compgen -- -c
            return
            ;;
        -*4*)
            ipvx=-4
            ;;
        -*6*)
            ipvx=-6
            ;;
    esac

    if [[ $cur == -F* ]]; then
        _comp_compgen -c "${cur#-F}" filedir
        # Prefix completions with '-F'
        COMPREPLY=("${COMPREPLY[@]/#/-F}")
    elif [[ $cur == -* ]]; then
        _comp_compgen_usage
    else
        _known_hosts_real ${ipvx:+"$ipvx"} -a ${configfile:+-F "$configfile"} -- "$cur"
    fi
} &&
    shopt -u hostcomplete && complete -F _comp_cmd_sftp sftp

# things we want to backslash escape in scp paths
# shellcheck disable=SC2089
_comp_cmd_scp__path_esc='[][(){}<>"'"'"',:;^&!$=?`\\|[:space:]]'

# Complete remote files with ssh.  If the first arg is -d, complete on dirs
# only.  Returns paths escaped with three backslashes.
# @since 2.12
# shellcheck disable=SC2120
_comp_xfunc_scp_remote_files()
{
    # remove backslash escape from the first colon
    cur=${cur/\\:/:}

    local userhost=${cur%%?(\\):*}
    local path=${cur#*:}

    # unescape (3 backslashes to 1 for chars we escaped)
    # shellcheck disable=SC2090
    path=$(command sed -e 's/\\\\\\\('"$_comp_cmd_scp__path_esc"'\)/\\\1/g' <<<"$path")

    # default to home dir of specified user on remote host
    if [[ ! $path ]]; then
        path=$(ssh -o 'Batchmode yes' "$userhost" pwd 2>/dev/null)
    fi

    local files
    if [[ ${1-} == -d ]]; then
        # escape problematic characters; remove non-dirs
        # shellcheck disable=SC2090
        files=$(ssh -o 'Batchmode yes' "$userhost" \
            command ls -aF1dL "$path*" 2>/dev/null |
            command sed -e 's/'"$_comp_cmd_scp__path_esc"'/\\\\\\&/g' -e '/[^\/]$/d')
    else
        # escape problematic characters; remove executables, aliases, pipes
        # and sockets; add space at end of file names
        # shellcheck disable=SC2090
        files=$(ssh -o 'Batchmode yes' "$userhost" \
            command ls -aF1dL "$path*" 2>/dev/null |
            command sed -e 's/'"$_comp_cmd_scp__path_esc"'/\\\\\\&/g' -e 's/[*@|=]$//g' \
                -e 's/[^\/]$/& /g')
    fi
    _comp_split -la COMPREPLY "$files"
}

_comp_deprecate_func 2.12 _scp_remote_files _comp_xfunc_scp_remote_files

# This approach is used instead of _comp_compgen_filedir to get a space
# appended after local file/dir completions, and -o nospace retained for
# others.  If first arg is -d, complete on directory names only.  The next arg
# is an optional prefix to add to returned completions.
# @since 2.12
_comp_xfunc_scp_local_files()
{
    local IFS=$'\n'

    local dirsonly=""
    if [[ ${1-} == -d ]]; then
        dirsonly=set
        shift
    fi

    local files
    _comp_expand_glob files '"$cur"*'
    ((${#files[@]})) || return 0
    if [[ $dirsonly ]]; then
        COMPREPLY+=($(command ls -aF1dL "${files[@]}" 2>/dev/null |
            command sed -e "s/$_comp_cmd_scp__path_esc/\\\\&/g" -e '/[^\/]$/d' \
                -e "s/^/${1-}/"))
    else
        COMPREPLY+=($(command ls -aF1dL "${files[@]}" 2>/dev/null |
            command sed -e "s/$_comp_cmd_scp__path_esc/\\\\&/g" -e 's/[*@|=]$//g' \
                -e 's/[^\/]$/& /g' -e "s/^/${1-}/"))
    fi
}

_comp_deprecate_func 2.12 _scp_local_files _comp_xfunc_scp_local_files

# scp(1) completion
#
_comp_cmd_scp()
{
    local cur prev words cword comp_args
    _comp_initialize -n : -- "$@" || return

    local configfile
    _comp_cmd_ssh__configfile

    _comp_xfunc_ssh_suboption_check && {
        ((${#COMPREPLY[@]})) && COMPREPLY=("${COMPREPLY[@]/%/ }")
        return
    }

    local ipvx

    case $prev in
        -*c)
            _comp_cmd_ssh__ciphers
            COMPREPLY=("${COMPREPLY[@]/%/ }")
            return
            ;;
        -*F)
            _comp_compgen_filedir
            compopt +o nospace
            return
            ;;
        -*i)
            _comp_xfunc_ssh_identityfile
            compopt +o nospace
            return
            ;;
        -*J)
            _known_hosts_real -a ${configfile:+-F "$configfile"} -- "$cur"
            return
            ;;
        -*[lP])
            return
            ;;
        -*o)
            _comp_xfunc_ssh_options
            return
            ;;
        -*S)
            compopt +o nospace -o filenames
            _comp_compgen -- -c
            return
            ;;
        -*4*)
            ipvx=-4
            ;;
        -*6*)
            ipvx=-6
            ;;
    esac

    _expand || return

    case $cur in
        !(*:*)/* | [.~]*) ;; # looks like a path
        *:*)
            _comp_xfunc_scp_remote_files
            return
            ;;
    esac

    local prefix

    if [[ $cur == -F* ]]; then
        cur=${cur#-F}
        prefix=-F
    else
        case $cur in
            -*)
                _comp_compgen_usage
                COMPREPLY=("${COMPREPLY[@]/%/ }")
                return
                ;;
            *)
                if ! _comp_looks_like_path "$cur"; then
                    _known_hosts_real ${ipvx-} -c -a \
                        ${configfile:+-F "$configfile"} -- "$cur"
                fi
                ;;
        esac
    fi

    _comp_xfunc_scp_local_files "${prefix-}"
} &&
    complete -F _comp_cmd_scp -o nospace scp

# ex: filetype=sh
