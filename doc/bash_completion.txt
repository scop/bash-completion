= Bash completion

== Configuration files

*$BASH_COMPLETION_USER_FILE*::
    Sourced late by bash_completion, pretty much after everything else.
    Use this file for example to load additional completions, and to remove
    and override ones installed by bash_completion. Defaults to
    `~/.bash_completion` if unset or null.

*$XDG_CONFIG_HOME/bash_completion*::
    Sourced by the bash_completion.sh profile.d script.  This file is
    suitable for definitions of all `COMP_*` environment variables
    below.  If `$XDG_CONFIG_HOME` is unset or null, `~/.config` is
    used instead of it.

== Environment variables

*BASH_COMPLETION_COMPAT_DIR*::
    Directory for pre-dynamic loading era (pre-2.0) backwards compatibility
    completion files that are loaded eagerly from `bash_completion` when it is
    loaded. If unset or null, the default compatibility directory to use is
    `/etc/bash_completion.d`.

*BASH_COMPLETION_HOST_EXCLUSION_PATTERN*::
    A list of patterns, one per line, interpreted in the regular expression
    language specified by `BASH_COMPLETION_HOST_EXCLUSION_RE_LANGUAGE`.
    Hosts that match any pattern are excluded from completion.

    Lines shall be text and be terminated by a newline.
    Lines that are empty or consist only of whitespace as well as lines that
    start with optional whitespace followed by `#` (and any further characters)
    are ignored.

    If no pattern results (that is: if this is unset or empty and if no pattern
    results via `BASH_COMPLETION_HOST_EXCLUSION_PATTERN_FILES`), no host
    exclusion is performed.

    May be used together with `BASH_COMPLETION_HOST_EXCLUSION_PATTERN_FILES`.
    May be changed at runtime.

*BASH_COMPLETION_HOST_EXCLUSION_PATTERN_FILES*::
    A variable (one pathname) or indexed array (one or more pathnames) that
    specifies files, each a containing list of patterns, one per line,
    interpreted in the regular expression language specified by
    `BASH_COMPLETION_HOST_EXCLUSION_RE_LANGUAGE`.
    Pathnames do not undergo filename expansion using the pattern matching
    notation (“globbing”; any “wildcards” are interpreted literally). Files that
    do not exist or are not readable are silently ignored.
    Hosts that match any pattern are excluded from completion.

    Lines shall be text and be terminated by a newline.
    Lines that are empty or consist only of whitespace as well as lines that
    start with optional whitespace followed by `#` (and any further characters)
    are ignored.

    If no pattern results (that is: if this is unset or empty or if no file
    exists and is readable and if no pattern results via
    `BASH_COMPLETION_HOST_EXCLUSION_PATTERN`), no host exclusion is performed.

    The patterns are re-read on every completion.
    Therefore – and unlike `BASH_COMPLETION_HOST_EXCLUSION_PATTERN` (which is
    individual per shell) – the patterns from these files may be shared across
    shells. This can be used swap visibility of certain groups of hosts in
    completions.

    May be used together with `BASH_COMPLETION_HOST_EXCLUSION_PATTERN`.
    May be changed at runtime.

*BASH_COMPLETION_HOST_EXCLUSION_RE_LANGUAGE*::
    Specifies the regular expression language used to interpret the patterns of
    `BASH_COMPLETION_HOST_EXCLUSION_PATTERN` respectively
    `BASH_COMPLETION_HOST_EXCLUSION_PATTERN_FILES`.

    If `BRE` or `bre`, POSIX Basic Regular Expressions are used.
    If `PCRE` or `pcre`, Perl Compatible Regular Expressions are used. This
    requires support for PCRE (via the `--perl-regexp`-option) in the used
    implementation of `grep`.
    If `ERE`, `ere`, unset or empty, POSIX Extended Regular Expressions are
    used.

    May be changed at runtime.

*COMP_CONFIGURE_HINTS*::
    If set and not null, `configure` completion will return the entire option
    string (e.g.  `--this-option=DESCRIPTION`) so one can see what kind of data
    is required and then simply delete the descriptive text and add one's own
    data.  If unset or null (default), `configure` completion will strip
    everything after the '=' when returning completions.

*COMP_CVS_REMOTE*::
    If set and not null, `cvs commit` completion will try to complete on
    remotely checked-out files.  This requires passwordless access to the
    remote repository.  Default is unset.

*COMP_FILEDIR_FALLBACK*::
    If set and not null, completions that look for filenames based on their
    "extensions" will fall back to suggesting all files if there are none
    matching the sought ones.

*COMP_IWLIST_SCAN*::
    If set and not null, `iwconfig` completion will try to complete on
    available wireless networks identifiers.  Default is unset.

*COMP_KNOWN_HOSTS_WITH_HOSTFILE*::
    If set and not null (default), known hosts completion will complement
    hostnames from ssh's known_hosts files with hostnames taken from the file
    specified by the HOSTFILE shell variable (compgen -A hostname). If null,
    known hosts completion will omit hostnames from HOSTFILE.  Omitting
    hostnames from HOSTFILE is useful if HOSTFILE contains many entries for
    local web development or ad-blocking.

*COMP_KNOWN_HOSTS_WITH_AVAHI*::
    If set and not null, known hosts completion will try to use `avahi-browse`
    for additional completions.  This may be a slow operation in some setups.
    Default is unset.

*COMP_TAR_INTERNAL_PATHS*::
    If set and not null *before sourcing* the `tar` completion, it will do
    correct path completion for tar file _contents_.  If unset or null,
    _paths to_ tar files will be correctly completed. Unfortunately we do not
    have a way to make both Just Work properly at the moment.  We consider it
    more important to have proper completion of paths to tar files than it is
    to have completion for their contents, so the default is unset.
