proc setup {} {
    assert_bash_exec {unset COMP_CWORD COMP_LINE COMP_POINT COMP_WORDS}
    save_env
}


proc teardown {} {
    assert_bash_exec {unset args COMP_CWORD COMP_LINE COMP_POINT COMP_WORDS}
    # Delete 'COMP_WORDBREAKS' occupying two lines
    assert_env_unmodified {
        /COMP_WORDBREAKS=/{N
        d
        }
    }
}


setup


set test "_count_args should run without errors"
assert_bash_exec {_count_args > /dev/null} $test
sync_after_int

set test "a b| should set args to 1";  # | = cursor position
set cmd {COMP_WORDS=(a b); COMP_CWORD=1; COMP_LINE='a b'; COMP_POINT=3; _count_args; echo $args}
assert_bash_list 1 $cmd $test
sync_after_int

set test "a b|c should set args to 1";  # | = cursor position
set cmd {COMP_WORDS=(a bc); COMP_CWORD=1; COMP_LINE='a bc'; COMP_POINT=3; _count_args; echo $args}
assert_bash_list 1 $cmd $test
sync_after_int

set test "a b c| should set args to 2";  # | = cursor position
set cmd {COMP_WORDS=(a b c); COMP_CWORD=2; COMP_LINE='a b c'; COMP_POINT=4; _count_args; echo $args}
assert_bash_list 2 $cmd $test
sync_after_int

set test "a b| c should set args to 1";  # | = cursor position
set cmd {COMP_WORDS=(a b c); COMP_CWORD=1; COMP_LINE='a b c'; COMP_POINT=3; _count_args; echo $args}
assert_bash_list 1 $cmd $test
sync_after_int

set test "a b -c| d should set args to 2";  # | = cursor position
set cmd {COMP_WORDS=(a b -c d); COMP_CWORD=2; COMP_LINE='a b -c d'; COMP_POINT=6; _count_args; echo $args}
assert_bash_list 2 $cmd $test
sync_after_int

set test "a b -c| d e should set args to 2";  # | = cursor position
set cmd {COMP_WORDS=(a b -c d e); COMP_CWORD=4; COMP_LINE='a b -c d e'; COMP_POINT=6; _count_args "" "@(-c|--foo)"; echo $args}
assert_bash_list 2 $cmd $test
sync_after_int


teardown
